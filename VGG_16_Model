
import pandas as pd
import numpy as np
import os
from glob import glob
import itertools
import fnmatch
import random
import matplotlib.pylab as plt
import seaborn as sns
import cv2
from scipy.misc import imresize, imread
import sklearn
from sklearn import model_selection
from sklearn.model_selection import train_test_split, KFold, cross_val_score, StratifiedKFold, learning_curve, GridSearchCV
from sklearn.metrics import confusion_matrix, make_scorer, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC, LinearSVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
import keras
from keras import backend as K
from keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical
from keras.models import Sequential, model_from_json
from keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta
from keras.layers import GlobalAveragePooling2D , Dense, Dropout, Activation, Flatten, BatchNormalization, Conv2D, MaxPool2D, MaxPooling2D
import os
#import Image
import glob2
from sys import exit
from matplotlib import style
style.use("ggplot")


import keras
import numpy as np
import tensorflow
from keras.applications import vgg16, inception_v3, resnet50 #, mobilenet


print(os.listdir(r'/home2/aparaye/aniket/keras_tut/Breast_Cancer/'))

from os import listdir
#print(listdir(r'/home2/aparaye/aniket/keras_tut/Breast_Cancer/IDC_regular_ps50_idx5/')[:10])

#print(listdir(r'/home2/aparaye/aniket/keras_tut/Breast_Cancer/IDC_regular_ps50_idx5/10285'))


imagePatches = glob2.glob(r'/home2/aparaye/aniket/keras_tut/Breast_Cancer/IDC_regular_ps50_idx5/**/*.png', recursive = True)
#for filename in imagePatches[0:10]:
#    print(filename)
#print(len(imagePatches), imagePatches[:10])

#Plot the image
#image = cv2.imread(r'/home2/aparaye/aniket/keras_tut/Breast_Cancer/IDC_regular_ps50_idx5/10285/1/10285_idx5_x1151_y901_class1.png')
#plt.figure(figsize=(16,16))
#plt.imshow(image)
#plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))


# Plot multiple images
#bunchOfImages = imagePatches
#i_ = 0
#plt.rcParams['figure.figsize'] = (10.0, 10.0)
#plt.subplots_adjust(wspace=0, hspace=0)
#for l in bunchOfImages[:25]:
#    im = cv2.imread(l)
 #   im = cv2.resize(im, (50, 50), interpolation = cv2.INTER_AREA) 
  #  plt.subplot(5, 5, i_+1) #.set_title(l)
   # plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')
   # i_ += 1

def randomImages(a):
    r = random.sample(a, 4)
    plt.figure(figsize=(16,16))
    plt.subplot(131)
    plt.imshow(cv2.imread(r[0]))
    plt.subplot(132)
    plt.imshow(cv2.imread(r[1]))
    plt.subplot(133)
    plt.imshow(cv2.imread(r[2])); 

#randomImages(imagePatches)

patternZero =r'*class0.png'
patternOne = r'*class1.png'
classZero = fnmatch.filter(imagePatches, patternZero)
classOne  = fnmatch.filter(imagePatches, patternOne)
print(len(classZero))
print(len(classOne))
#exit(0)
print("IDC(-)",classZero[0:5])
print("IDC(+)",classOne[0:5])
#exit(0)
def proc_images(lowerIndex,upperIndex):
    
    """
    Returns two arrays: 
        x is an array of resized images
        y is an array of labels
    """ 
    x = []
    y = []
    WIDTH = 50
    HEIGHT = 50
    for img in imagePatches[lowerIndex:upperIndex]:
	#im1 = Image.open(img)
	#x.append(im1.resize((WIDTH,HEIGHT),Image.BICUBIC))
	#im1.show()
      full_size_image = cv2.imread(img)
      x.append(cv2.resize(full_size_image, (WIDTH,HEIGHT), interpolation=cv2.INTER_CUBIC))
      if img in classZero:
         y.append(0)
      elif img in classOne:
         y.append(1)
      else:
         return
    return x,y

X,Y = proc_images(0,100000)#277533 
#X,Y = proc_images(0,2)#277533

X1 = np.array(X)

print(X1.shape)

df = pd.DataFrame()
df["images"]=X
df["labels"]=Y
X2=df["images"]
Y2=df["labels"]
print(type(X2))

X2=np.array(X2)
print(X2.shape)

imgs0=[]
imgs1=[]
imgs0 = X2[Y2==0] # (0 = no IDC, 1 = IDC)
imgs1 = X2[Y2==1]
 
def describeData(a,b):
    print('Total number of images: {}'.format(len(a)))
    print('Number of IDC(-) Images: {}'.format(np.sum(b==0)))
    print('Number of IDC(+) Images: {}'.format(np.sum(b==1)))
    print('Percentage of positive images: {:.2f}%'.format(100*np.mean(b)))
    print('Image shape (Width, Height, Channels): {}'.format(a[0].shape))

describeData(X2,Y2)

X=np.array(X)
X=X/255.0

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

import gc
gc.collect()

print(X_train.shape)

print(X_test.shape)

dist = df['labels'].value_counts()
print(dist)

#sns.countplot(df['labels'])

#One Hot encoding
# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])
from keras.utils.np_utils import to_categorical
y_trainHot = to_categorical(Y_train, num_classes = 2)
y_testHot = to_categorical(Y_test, num_classes = 2)


class MetricsCheckpoint(Callback):
    """Callback that saves metrics after each epoch"""
    def __init__(self, savepath):
        super(MetricsCheckpoint, self).__init__()
        self.savepath = savepath
        self.history = {}
    def on_epoch_end(self, epoch, logs=None):
        for k, v in logs.items():
            self.history.setdefault(k, []).append(v)
        np.save(self.savepath, self.history)

def plotKerasLearningCurve():
    plt.figure(figsize=(10,5))
    metrics = np.load('logs.npy')[()]
    filt = ['acc'] # try to add 'loss' to see the loss learning curve
    for k in filter(lambda x : np.any([kk in x for kk in filt]), metrics.keys()):
        l = np.array(metrics[k])
        plt.plot(l, c= 'r' if 'val' not in k else 'b', label='val' if 'val' in k else 'train')
        x = np.argmin(l) if 'loss' in k else np.argmax(l)
        y = l[x]
        plt.scatter(x,y, lw=0, alpha=0.25, s=100, c='r' if 'val' not in k else 'b')
        plt.text(x, y, '{} = {:.4f}'.format(x,y), size='15', color= 'r' if 'val' not in k else 'b')   
    plt.legend(loc=4)
    plt.axis([0, None, None, None]);
    plt.grid()
    plt.xlabel('Number of epochs')
    plt.savefig('epoch_vs_acc.png')

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.figure(figsize = (5,5))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=90)
    plt.yticks(tick_marks, classes)
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.savefig('confusion_matrix.png')

def plot_learning_curve(history):
    plt.figure(figsize=(8,8))
    plt.subplot(1,2,1)
    plt.plot(history.history['acc'])
    plt.plot(history.history['val_acc'])
    plt.title('model accuracy')
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.savefig('accuracy_curve.png')
    #plt.clf()
    # summarize history for loss
    plt.subplot(1,2,2)
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('model loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.savefig('loss_curve.png')

def sensitivity(y_true, y_pred):
    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
    return true_positives / (possible_positives + K.epsilon())

def specificity(y_true, y_pred):
    true_negatives = K.sum(K.round(K.clip((1-y_true) * (1-y_pred), 0, 1)))
    possible_negatives = K.sum(K.round(K.clip(1-y_true, 0, 1)))
    return true_negatives / (possible_negatives + K.epsilon())

#Model Buliding
batch_size = 128
num_classes = 2
epochs = 8
img_rows,img_cols=50,50
input_shape = (img_rows, img_cols, 3)
e = 2

 
#Load the VGG model
vgg_model = vgg16.VGG16(weights='imagenet',   include_top=False,input_shape=(50,50,3) )


for layer in vgg_model.layers[:75]:
  layer.trainable = False

for layer in vgg_model.layers[75:]:
  layer.trainable = True


model = Sequential()

model.add(vgg_model)
model.add(GlobalAveragePooling2D())
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(256, activation='relu'))
# the 2 corresponds to the three output classes
model.add(Dense(2, activation='softmax'))
model.summary()

model.compile(loss=keras.losses.binary_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy',sensitivity, specificity])

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its      callbacks = [MetricsCheckpoint('logs')]std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=25,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=True)  # randomly flip images

a = X_train
b = y_trainHot
c = X_test
d = y_testHot

epoch=250
#epoch=1
checkpoint = ModelCheckpoint('weights.{epoch: 04d}-{acc: .4f}-{loss: .4f}-{sensitivity: .4f}-{specificity: .4f}-{val_acc:.4f}-{val_loss:.2f}-{val_sensitivity: .4f}-{val_specificity: .4f}.hdf5', save_best_only = False, save_weights_only=False,period = 1)

history = model.fit_generator(datagen.flow(a,b, batch_size=32),
                              steps_per_epoch=len(a) / 32, 
                              epochs=epoch,validation_data = [c, d],
                              callbacks = [checkpoint,
			      MetricsCheckpoint('logs')])


model.save("VG16.h5")
y_pred = model.predict(c)

Y_pred_classes = np.argmax(y_pred,axis=1) 
Y_true = np.argmax(d,axis=1)
dict_characters = {0: 'IDC(-)', 1: 'IDC(+)'}

#confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) 
#plot_confusion_matrix(confusion_mtx, classes = list(dict_characters.values())) 
#plt.show()

#plotKerasLearningCurve()
#plt.show()  


#plot_learning_curve(history)
#plt.show()

 
#Load the Inception_V3 model
#inception_model = inception_v3.InceptionV3(weights='imagenet')
#inception_model.summary()
 
#Load the ResNet50 model
#resnet_model = resnet50.ResNet50(weights='imagenet')
#resnet_model.summary()
 
#Load the MobileNet model
#mobilenet_model = mobilenet.MobileNet(weights='imagenet')
#mobilenet_model.summary()


from keras.preprocessing import image

img = image.load_img("/home2/aparaye/aniket/keras_tut/Breast_Cancer/no.png", target_size=(50,50,3))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x= x/225.
images = np.vstack([x])
classes = model.predict_classes(images)
print (classes)
